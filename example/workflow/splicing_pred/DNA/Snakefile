import os
import yaml
from os import listdir
from os.path import isfile, join
import pathlib

genome = config['genome']
vcf_dir = os.path.dirname(config['vcf'])
vcf_ids = [file for file in listdir(vcf_dir) if '.tbi' not in file]

def splicemap5(wildcards):
    path = Path(config_download['splicemap_dir'])
    splicemaps = [
        path / f'{tissue}_splicemap_psi5_method=kn_event_filter=median_cutoff.csv.gz' 
        for tissue in config['splicemap_tissues']
        ]
    splicemaps = [str(x) for x in splicemaps]
    return splicemaps

def splicemap3(wildcards):
    path = Path(config_download['splicemap_dir'])
    splicemaps = [
        path / f'{tissue}_splicemap_psi3_method=kn_event_filter=median_cutoff.csv.gz' 
        for tissue in config['splicemap_tissues']
        ]
    splicemaps = [str(x) for x in splicemaps]
    return splicemaps

if config['devAbSplice']:
    def splicemap5(wildcards):
        path = Path(config_download['splicemap_dir'])
        splicemaps = [
            path / f'{tissue}_splicemap_psi5_method=kn_event_filter=median_cutoff.csv.gz' 
            for tissue in config['splicemap_tissues']
            ]
        splicemaps = [str(x) for x in splicemaps]

        path_dev = os.path.join(config_download['splicemap_dir'], "devSpliceMap_hg19/")
        dev_splicemaps = [
            path / f'devSpliceMap_hg19/splicemap_tissue={dev_tissue}_timepoint={timepoint}_psi5.csv.gz' 
            for dev_tissue in config['dev_splicemap_tissues']
            for timepoint in config['dev_splicemap_timepoints']
            ]
        dev_splicemaps = [str(x) for x in dev_splicemaps]
        return splicemaps + dev_splicemaps
    def splicemap3(wildcards):
        path = Path(config_download['splicemap_dir'])
        splicemaps = [
            path / f'{tissue}_splicemap_psi3_method=kn_event_filter=median_cutoff.csv.gz' 
            for tissue in config['splicemap_tissues']
            ]
        splicemaps = [str(x) for x in splicemaps]

        path_dev = os.path.join(config_download['splicemap_dir'], "devSpliceMap_hg19/")
        dev_splicemaps = [
            path / f'devSpliceMap_hg19/splicemap_tissue={dev_tissue}_timepoint={timepoint}_psi3.csv.gz' 
            for dev_tissue in config['dev_splicemap_tissues']
            for timepoint in config['dev_splicemap_timepoints']
            ]
        dev_splicemaps = [str(x) for x in dev_splicemaps]
        return splicemaps + dev_splicemaps

rule mmsplice_splicemap:
    input:
        vcf = config['vcf'],
        fasta = config_download['fasta'][genome]['file'],
        splicemap_5 = splicemap5,
        splicemap_3 = splicemap3
    resources:
        mem_mb = lambda wildcards, attempt: attempt * 32000,
        threads = 4
    output:
        result = config_pred['splicing_pred']['mmsplice_splicemap']
    script:
        "./mmsplice_splicemap.py"

rule pangolin:
    input:
        vcf = config['vcf'],
        fasta = config_download['fasta'][genome]['file'],
        anno = config_download['pangolin_anno'][genome]['file']
    resources:
        mem_mb = lambda wildcards, attempt: attempt * 16000,
        threads = 1,
        gpu = 1,
    conda:
        "../../../envs/environment_pangolin.yaml"
    output:
        result = config_pred['splicing_pred']['pangolin_raw']
    shell:
        'pangolin -m True -d 50 {input.vcf} {input.fasta} {input.anno} {output.result}'

rule pangolin_vcf_to_csv:
    input:
        pangolin_raw = config_pred['splicing_pred']['pangolin_raw']
    resources:
        mem_mb = lambda wildcards, attempt: attempt * 32000,
        threads = 1
    output:
        pangolin_csv = config_pred['splicing_pred']['pangolin_csv']
    script:
        "./pangolin_postprocess.py"

rule pangolin_splicemap:
    input:
        pangolin_csv = config_pred['splicing_pred']['pangolin_csv'],
        splicemap_5 = splicemap5,
        splicemap_3 = splicemap3,
    resources:
        mem_mb = lambda wildcards, attempt: attempt * 32000,
        threads = 1
    output:
        pangolin_splicemap = config_pred['splicing_pred']['pangolin_splicemap']
    script:
        "./pangolin_splicemap.py"

rule absplice_dna:
    input:
        mmsplice_splicemap = config_pred['splicing_pred']['mmsplice_splicemap'],
        pangolin_splicemap = config_pred['splicing_pred']['pangolin_splicemap'],
    resources:
        mem_mb = lambda wildcards, attempt: attempt * 32000,
        threads = 1
    params:
        extra_info = config['extra_info_dna']
    output:
        absplice_dna = config_pred['splicing_pred']['absplice_dna']
    script:
        "./absplice_dna.py"


rule all_predict_dna:
    input:
        expand(config_pred['splicing_pred']['absplice_dna'],
            genome = config['genome'], vcf_id=vcf_ids),


del splicemap5
del splicemap3
